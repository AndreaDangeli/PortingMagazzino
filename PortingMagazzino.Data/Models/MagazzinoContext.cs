// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace PortingMagazzino.Data.Models
{
    public partial class MagazzinoContext : DbContext
    {
        public MagazzinoContext()
        {
        }

        public MagazzinoContext(DbContextOptions<MagazzinoContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CausaleAnnullamento> CausaleAnnullamento { get; set; }
        public virtual DbSet<CausaleMovimentiMagazzino> CausaleMovimentiMagazzino { get; set; }
        public virtual DbSet<Colli> Colli { get; set; }
        public virtual DbSet<Documenti> Documenti { get; set; }
        public virtual DbSet<Incoterms> Incoterms { get; set; }
        public virtual DbSet<Matricole> Matricole { get; set; }
        public virtual DbSet<MatricoleScarico> MatricoleScarico { get; set; }
        public virtual DbSet<MatricoleStoricoTrasferimenti> MatricoleStoricoTrasferimenti { get; set; }
        public virtual DbSet<NoteDdt> NoteDdt { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrder { get; set; }
        public virtual DbSet<PurchaseOrderLine> PurchaseOrderLine { get; set; }
        public virtual DbSet<PurchaseOrderReceiving> PurchaseOrderReceiving { get; set; }
        public virtual DbSet<Receiving> Receiving { get; set; }
        public virtual DbSet<ReceivingLine> ReceivingLine { get; set; }
        public virtual DbSet<SalesOrder> SalesOrder { get; set; }
        public virtual DbSet<SalesOrderLine> SalesOrderLine { get; set; }
        public virtual DbSet<SalesOrderShipment> SalesOrderShipment { get; set; }
        public virtual DbSet<Shipment> Shipment { get; set; }
        public virtual DbSet<ShipmentLine> ShipmentLine { get; set; }
        public virtual DbSet<TransferOrder> TransferOrder { get; set; }
        public virtual DbSet<TransferOrderLine> TransferOrderLine { get; set; }
        public virtual DbSet<Vmstock> Vmstock { get; set; }
        public virtual DbSet<VwDatiRichiestaDelivery> VwDatiRichiestaDelivery { get; set; }
        public virtual DbSet<VwFornitoriUbicazioni> VwFornitoriUbicazioni { get; set; }
        public virtual DbSet<VwGiacenza> VwGiacenza { get; set; }
        public virtual DbSet<VwProdottiCaricoScarico> VwProdottiCaricoScarico { get; set; }
        public virtual DbSet<VwProdottiOrdine> VwProdottiOrdine { get; set; }
        public virtual DbSet<VwProdottiTrasferiti> VwProdottiTrasferiti { get; set; }
        public virtual DbSet<VwResponsabili> VwResponsabili { get; set; }
        public virtual DbSet<VwUbicazioni> VwUbicazioni { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AI");

            modelBuilder.Entity<CausaleAnnullamento>(entity =>
            {
                entity.ToTable("CausaleAnnullamento", "Magazzino");

                entity.Property(e => e.CausaleAnnullamentoId).HasMaxLength(38);

                entity.Property(e => e.Descrizione)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<CausaleMovimentiMagazzino>(entity =>
            {
                entity.ToTable("CausaleMovimentiMagazzino", "Magazzino");

                entity.Property(e => e.CausaleMovimentiMagazzinoId).HasMaxLength(38);

                entity.Property(e => e.CodiceEsterno).HasMaxLength(50);

                entity.Property(e => e.Descrizione)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Colli>(entity =>
            {
                entity.ToTable("Colli", "Magazzino");

                entity.HasIndex(e => e.ShipmentId, "IX_Colli_shipmentId");

                entity.Property(e => e.ColliId).HasMaxLength(38);

                entity.Property(e => e.Altezza).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Lunghezza).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.Peso).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.Profondita).HasColumnType("numeric(12, 3)");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentId");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ColliNavigation)
                    .HasForeignKey(d => d.ShipmentId);
            });

            modelBuilder.Entity<Documenti>(entity =>
            {
                entity.ToTable("Documenti", "Magazzino");

                entity.HasIndex(e => e.ReceivingId, "IX_Documenti_receivingId");

                entity.Property(e => e.DocumentiId).HasMaxLength(38);

                entity.Property(e => e.DocumentiNome).HasMaxLength(50);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ReceivingId)
                    .HasMaxLength(38)
                    .HasColumnName("receivingId");

                entity.HasOne(d => d.Receiving)
                    .WithMany(p => p.Documenti)
                    .HasForeignKey(d => d.ReceivingId);
            });

            modelBuilder.Entity<Incoterms>(entity =>
            {
                entity.HasKey(e => e.Codice);

                entity.ToTable("Incoterms", "Magazzino");

                entity.Property(e => e.Codice)
                    .HasMaxLength(50)
                    .HasColumnName("codice");

                entity.Property(e => e.Descrizione)
                    .HasMaxLength(500)
                    .HasColumnName("descrizione");
            });

            modelBuilder.Entity<Matricole>(entity =>
            {
                entity.ToTable("Matricole", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_Matricole_IdProdotto");

                entity.HasIndex(e => e.ReceivingLineId, "IX_Matricole_receivingLineId");

                entity.HasIndex(e => e.ShipmentId, "IX_Matricole_shipmentId");

                entity.HasIndex(e => e.ShipmentLineId, "IX_Matricole_shipmentLineId");

                entity.Property(e => e.MatricoleId).HasMaxLength(38);

                entity.Property(e => e.Cespite).HasMaxLength(20);

                entity.Property(e => e.CodCostruttore).HasMaxLength(6);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Matricola).HasMaxLength(50);

                entity.Property(e => e.ReceivingLineId)
                    .HasMaxLength(38)
                    .HasColumnName("receivingLineId");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentId");

                entity.Property(e => e.ShipmentLineId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentLineId");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.HasOne(d => d.ReceivingLine)
                    .WithMany(p => p.Matricole)
                    .HasForeignKey(d => d.ReceivingLineId);
            });

            modelBuilder.Entity<MatricoleScarico>(entity =>
            {
                entity.ToTable("MatricoleScarico", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_MatricoleScarico_IdProdotto");

                entity.HasIndex(e => e.MatricoleId, "IX_MatricoleScarico_MatricoleId");

                entity.HasIndex(e => e.ShipmentLineId, "IX_MatricoleScarico_shipmentLineId");

                entity.Property(e => e.MatricoleScaricoId).HasMaxLength(38);

                entity.Property(e => e.CodCostruttore).HasMaxLength(6);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Matricola).HasMaxLength(50);

                entity.Property(e => e.MatricoleId).HasMaxLength(38);

                entity.Property(e => e.ShipmentLineId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentLineId");

                entity.HasOne(d => d.Matricole)
                    .WithMany(p => p.MatricoleScarico)
                    .HasForeignKey(d => d.MatricoleId);

                entity.HasOne(d => d.ShipmentLine)
                    .WithMany(p => p.MatricoleScarico)
                    .HasForeignKey(d => d.ShipmentLineId);
            });

            modelBuilder.Entity<MatricoleStoricoTrasferimenti>(entity =>
            {
                entity.ToTable("MatricoleStoricoTrasferimenti", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_MatricoleStoricoTrasferimenti_IdProdotto");

                entity.HasIndex(e => e.MatricoleId, "IX_MatricoleStoricoTrasferimenti_MatricoleId");

                entity.HasIndex(e => e.TransferOrderId, "IX_MatricoleStoricoTrasferimenti_transferOrderId");

                entity.HasIndex(e => e.TransferOrderLineId, "IX_MatricoleStoricoTrasferimenti_transferOrderLineId");

                entity.HasIndex(e => e.WarehouseFromId, "IX_MatricoleStoricoTrasferimenti_warehouseFromId");

                entity.HasIndex(e => e.WarehouseToId, "IX_MatricoleStoricoTrasferimenti_warehouseToId");

                entity.Property(e => e.MatricoleStoricoTrasferimentiId).HasMaxLength(38);

                entity.Property(e => e.Cespite).HasMaxLength(20);

                entity.Property(e => e.CodCostruttore).HasMaxLength(6);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Matricola).HasMaxLength(50);

                entity.Property(e => e.MatricoleId).HasMaxLength(38);

                entity.Property(e => e.TransferOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderId");

                entity.Property(e => e.TransferOrderLineId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderLineId");

                entity.Property(e => e.WarehouseFromId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseFromId");

                entity.Property(e => e.WarehouseToId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseToId");

                entity.HasOne(d => d.Matricole)
                    .WithMany(p => p.MatricoleStoricoTrasferimenti)
                    .HasForeignKey(d => d.MatricoleId);

                entity.HasOne(d => d.TransferOrder)
                    .WithMany(p => p.MatricoleStoricoTrasferimenti)
                    .HasForeignKey(d => d.TransferOrderId);

                entity.HasOne(d => d.TransferOrderLine)
                    .WithMany(p => p.MatricoleStoricoTrasferimenti)
                    .HasForeignKey(d => d.TransferOrderLineId);

                entity.HasOne(d => d.WarehouseFrom)
                    .WithMany(p => p.MatricoleStoricoTrasferimentiWarehouseFrom)
                    .HasForeignKey(d => d.WarehouseFromId);

                entity.HasOne(d => d.WarehouseTo)
                    .WithMany(p => p.MatricoleStoricoTrasferimentiWarehouseTo)
                    .HasForeignKey(d => d.WarehouseToId);
            });

            modelBuilder.Entity<NoteDdt>(entity =>
            {
                entity.ToTable("NoteDDT", "Magazzino");

                entity.Property(e => e.NoteDdtid)
                    .HasMaxLength(38)
                    .HasColumnName("NoteDDTId");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Nota).HasMaxLength(500);
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.ToTable("PurchaseOrder", "Magazzino");

                entity.HasIndex(e => e.CausaleMovimentiMagazzinoId, "IX_PurchaseOrder_CausaleMovimentiMagazzinoId");

                entity.HasIndex(e => e.IdFornitore, "IX_PurchaseOrder_IdFornitore");

                entity.HasIndex(e => e.IdUbicazione, "IX_PurchaseOrder_IdUbicazione");

                entity.Property(e => e.PurchaseOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("purchaseOrderId");

                entity.Property(e => e.CausaleMovimentiMagazzinoId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.CodiceCommessa).HasMaxLength(50);

                entity.Property(e => e.CodiceEsterno).HasMaxLength(50);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManagerInternal)
                    .HasMaxLength(30)
                    .HasColumnName("managerInternal");

                entity.Property(e => e.ManagerVendor)
                    .HasMaxLength(30)
                    .HasColumnName("managerVendor");

                entity.Property(e => e.PurchaseOrderDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("purchaseOrderDate");

                entity.Property(e => e.PurchaseOrderDescription)
                    .HasMaxLength(500)
                    .HasColumnName("purchaseOrderDescription");

                entity.Property(e => e.PurchaseOrderNumber)
                    .HasMaxLength(20)
                    .HasColumnName("purchaseOrderNumber");

                entity.Property(e => e.PurchaseOrderStatus).HasColumnName("purchaseOrderStatus");

                entity.Property(e => e.ReceiveDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("receiveDate");

                entity.Property(e => e.ReferenceNumberExternal)
                    .HasMaxLength(30)
                    .HasColumnName("referenceNumberExternal");

                entity.Property(e => e.ReferenceNumberInternal)
                    .HasMaxLength(30)
                    .HasColumnName("referenceNumberInternal");

                entity.HasOne(d => d.CausaleMovimentiMagazzino)
                    .WithMany(p => p.PurchaseOrder)
                    .HasForeignKey(d => d.CausaleMovimentiMagazzinoId);
            });

            modelBuilder.Entity<PurchaseOrderLine>(entity =>
            {
                entity.ToTable("PurchaseOrderLine", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_PurchaseOrderLine_IdProdotto");

                entity.HasIndex(e => e.PurchaseOrderId, "IX_PurchaseOrderLine_purchaseOrderId");

                entity.Property(e => e.PurchaseOrderLineId)
                    .HasMaxLength(38)
                    .HasColumnName("purchaseOrderLineId");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurchaseOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("purchaseOrderId");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.ReceivingNumber).HasColumnName("receivingNumber");

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderLine)
                    .HasForeignKey(d => d.PurchaseOrderId);
            });

            modelBuilder.Entity<PurchaseOrderReceiving>(entity =>
            {
                entity.ToTable("PurchaseOrderReceiving", "Magazzino");

                entity.HasIndex(e => e.PurchaseOrderId, "IX_PurchaseOrderReceiving_PurchaseOrderId");

                entity.HasIndex(e => e.PurchaseOrderLineId, "IX_PurchaseOrderReceiving_PurchaseOrderLineId");

                entity.HasIndex(e => e.ReceivingId, "IX_PurchaseOrderReceiving_ReceivingId");

                entity.HasIndex(e => e.ReceivingLineId, "IX_PurchaseOrderReceiving_ReceivingLineId");

                entity.Property(e => e.Id)
                    .HasMaxLength(38)
                    .HasColumnName("id");

                entity.Property(e => e.PurchaseOrderId).HasMaxLength(38);

                entity.Property(e => e.PurchaseOrderLineId).HasMaxLength(38);

                entity.Property(e => e.QtyArrived).HasColumnName("qtyArrived");

                entity.Property(e => e.QtyTot).HasColumnName("qtyTot");

                entity.Property(e => e.ReceivingId).HasMaxLength(38);

                entity.Property(e => e.ReceivingLineId).HasMaxLength(38);

                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderReceiving)
                    .HasForeignKey(d => d.PurchaseOrderId);

                entity.HasOne(d => d.PurchaseOrderLine)
                    .WithMany(p => p.PurchaseOrderReceiving)
                    .HasForeignKey(d => d.PurchaseOrderLineId);

                entity.HasOne(d => d.Receiving)
                    .WithMany(p => p.PurchaseOrderReceiving)
                    .HasForeignKey(d => d.ReceivingId);

                entity.HasOne(d => d.ReceivingLine)
                    .WithMany(p => p.PurchaseOrderReceiving)
                    .HasForeignKey(d => d.ReceivingLineId);
            });

            modelBuilder.Entity<Receiving>(entity =>
            {
                entity.ToTable("Receiving", "Magazzino");

                entity.HasIndex(e => e.CausaleMovimentiMagazzinoId, "IX_Receiving_CausaleMovimentiMagazzinoId");

                entity.HasIndex(e => e.IdFornitore, "IX_Receiving_IdFornitore");

                entity.HasIndex(e => e.IdUbicazione, "IX_Receiving_IdUbicazione");

                entity.HasIndex(e => e.PurchaseOrderId, "IX_Receiving_purchaseOrderId");

                entity.HasIndex(e => e.WarehouseId, "IX_Receiving_warehouseId");

                entity.Property(e => e.ReceivingId)
                    .HasMaxLength(38)
                    .HasColumnName("receivingId");

                entity.Property(e => e.AspettoBeni).HasMaxLength(500);

                entity.Property(e => e.CausaleMovimentiMagazzinoId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.DataDdtfornitore)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("DataDDTFornitore");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.PurchaseOrderId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .HasColumnName("purchaseOrderId");

                entity.Property(e => e.ReceivingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("receivingDate");

                entity.Property(e => e.ReceivingNumber)
                    .HasMaxLength(20)
                    .HasColumnName("receivingNumber");

                entity.Property(e => e.RiferimentiDdt)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("RiferimentiDDT");

                entity.Property(e => e.WarehouseId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.HasOne(d => d.CausaleMovimentiMagazzino)
                    .WithMany(p => p.Receiving)
                    .HasForeignKey(d => d.CausaleMovimentiMagazzinoId);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.Receiving)
                    .HasForeignKey(d => d.WarehouseId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ReceivingLine>(entity =>
            {
                entity.ToTable("ReceivingLine", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_ReceivingLine_IdProdotto");

                entity.HasIndex(e => e.ReceivingId, "IX_ReceivingLine_receivingId");

                entity.HasIndex(e => e.WarehouseId, "IX_ReceivingLine_warehouseId");

                entity.Property(e => e.ReceivingLineId)
                    .HasMaxLength(38)
                    .HasColumnName("receivingLineId");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.QtyReceive).HasColumnName("qtyReceive");

                entity.Property(e => e.QtyReceived).HasColumnName("qtyReceived");

                entity.Property(e => e.ReceivingId)
                    .HasMaxLength(38)
                    .HasColumnName("receivingId");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.HasOne(d => d.Receiving)
                    .WithMany(p => p.ReceivingLine)
                    .HasForeignKey(d => d.ReceivingId);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ReceivingLine)
                    .HasForeignKey(d => d.WarehouseId);
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.ToTable("SalesOrder", "Magazzino");

                entity.HasIndex(e => e.CausaleMovimentiMagazzinoId, "IX_SalesOrder_CausaleMovimentiMagazzinoId");

                entity.HasIndex(e => e.IdUbicazione, "IX_SalesOrder_IdUbicazione");

                entity.HasIndex(e => e.IncotermsId, "IX_SalesOrder_IncotermsId");

                entity.Property(e => e.SalesOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("salesOrderId");

                entity.Property(e => e.CausaleMovimentiMagazzinoId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.CodiceCommessa).HasMaxLength(50);

                entity.Property(e => e.CodiceEsterno).HasMaxLength(50);

                entity.Property(e => e.DeliveryDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("deliveryDate");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .HasColumnName("description");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IncotermsId).HasMaxLength(50);

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.ManagerInternal)
                    .HasMaxLength(30)
                    .HasColumnName("managerInternal");

                entity.Property(e => e.ReferenceNumberExternal)
                    .HasMaxLength(30)
                    .HasColumnName("referenceNumberExternal");

                entity.Property(e => e.ReferenceNumberInternal)
                    .HasMaxLength(30)
                    .HasColumnName("referenceNumberInternal");

                entity.Property(e => e.SalesOrderDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("salesOrderDate");

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(20)
                    .HasColumnName("salesOrderNumber");

                entity.Property(e => e.SalesOrderStatus).HasColumnName("salesOrderStatus");

                entity.HasOne(d => d.CausaleMovimentiMagazzino)
                    .WithMany(p => p.SalesOrder)
                    .HasForeignKey(d => d.CausaleMovimentiMagazzinoId);

                entity.HasOne(d => d.Incoterms)
                    .WithMany(p => p.SalesOrder)
                    .HasForeignKey(d => d.IncotermsId);
            });

            modelBuilder.Entity<SalesOrderLine>(entity =>
            {
                entity.ToTable("SalesOrderLine", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_SalesOrderLine_IdProdotto");

                entity.HasIndex(e => e.SalesOrderId, "IX_SalesOrderLine_salesOrderId");

                entity.Property(e => e.SalesOrderLineId)
                    .HasMaxLength(38)
                    .HasColumnName("salesOrderLineId");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.SalesOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("salesOrderId");

                entity.Property(e => e.ShipmentNumber).HasColumnName("shipmentNumber");

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderLine)
                    .HasForeignKey(d => d.SalesOrderId);
            });

            modelBuilder.Entity<SalesOrderShipment>(entity =>
            {
                entity.ToTable("SalesOrderShipment", "Magazzino");

                entity.HasIndex(e => e.SalesOrderId, "IX_SalesOrderShipment_SalesOrderId");

                entity.HasIndex(e => e.SalesOrderLineId, "IX_SalesOrderShipment_SalesOrderLineId");

                entity.HasIndex(e => e.ShipmentId, "IX_SalesOrderShipment_ShipmentId");

                entity.HasIndex(e => e.ShipmentLineId, "IX_SalesOrderShipment_ShipmentLineId");

                entity.Property(e => e.Id)
                    .HasMaxLength(38)
                    .HasColumnName("id");

                entity.Property(e => e.QtySent).HasColumnName("qtySent");

                entity.Property(e => e.QtyTot).HasColumnName("qtyTot");

                entity.Property(e => e.SalesOrderId).HasMaxLength(38);

                entity.Property(e => e.SalesOrderLineId).HasMaxLength(38);

                entity.Property(e => e.ShipmentId).HasMaxLength(38);

                entity.Property(e => e.ShipmentLineId).HasMaxLength(38);

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderShipment)
                    .HasForeignKey(d => d.SalesOrderId);

                entity.HasOne(d => d.SalesOrderLine)
                    .WithMany(p => p.SalesOrderShipment)
                    .HasForeignKey(d => d.SalesOrderLineId);

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.SalesOrderShipment)
                    .HasForeignKey(d => d.ShipmentId);

                entity.HasOne(d => d.ShipmentLine)
                    .WithMany(p => p.SalesOrderShipment)
                    .HasForeignKey(d => d.ShipmentLineId);
            });

            modelBuilder.Entity<Shipment>(entity =>
            {
                entity.ToTable("Shipment", "Magazzino");

                entity.HasIndex(e => e.CausaleAnnullamentoId, "IX_Shipment_CausaleAnnullamentoId");

                entity.HasIndex(e => e.CausaleMovimentiMagazzinoId, "IX_Shipment_CausaleMovimentiMagazzinoId");

                entity.HasIndex(e => e.IdFornitoreUbicazione, "IX_Shipment_IdFornitoreUbicazione");

                entity.HasIndex(e => e.IdUbicazione, "IX_Shipment_IdUbicazione");

                entity.HasIndex(e => e.IncotermsId, "IX_Shipment_IncotermsId");

                entity.HasIndex(e => e.SalesOrderId, "IX_Shipment_salesOrderId");

                entity.HasIndex(e => e.WarehouseId, "IX_Shipment_warehouseId");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentId");

                entity.Property(e => e.AspettoBeni).HasMaxLength(100);

                entity.Property(e => e.CausaleAnnullamentoId).HasMaxLength(38);

                entity.Property(e => e.CausaleMovimentiMagazzinoId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.ExpeditionMode).HasColumnName("expeditionMode");

                entity.Property(e => e.ExpeditionType).HasColumnName("expeditionType");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdEvento)
                    .HasColumnType("numeric(18, 0)")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IncotermsId).HasMaxLength(50);

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.NoteAnnullamento).HasMaxLength(500);

                entity.Property(e => e.NoteDdtid)
                    .HasMaxLength(38)
                    .HasColumnName("NoteDDTId");

                entity.Property(e => e.NumeroDdt).HasColumnName("NumeroDDT");

                entity.Property(e => e.SalesOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("salesOrderId");

                entity.Property(e => e.ShipmentDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("shipmentDate");

                entity.Property(e => e.ShipmentNumber)
                    .HasMaxLength(20)
                    .HasColumnName("shipmentNumber");

                entity.Property(e => e.TrackingNumber).HasMaxLength(500);

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.HasOne(d => d.CausaleAnnullamento)
                    .WithMany(p => p.Shipment)
                    .HasForeignKey(d => d.CausaleAnnullamentoId);

                entity.HasOne(d => d.CausaleMovimentiMagazzino)
                    .WithMany(p => p.Shipment)
                    .HasForeignKey(d => d.CausaleMovimentiMagazzinoId);

                entity.HasOne(d => d.Incoterms)
                    .WithMany(p => p.Shipment)
                    .HasForeignKey(d => d.IncotermsId);
            });

            modelBuilder.Entity<ShipmentLine>(entity =>
            {
                entity.ToTable("ShipmentLine", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_ShipmentLine_IdProdotto");

                entity.HasIndex(e => e.ShipmentId, "IX_ShipmentLine_shipmentId");

                entity.HasIndex(e => e.WarehouseId, "IX_ShipmentLine_warehouseId");

                entity.Property(e => e.ShipmentLineId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentLineId");

                entity.Property(e => e.Asset).HasMaxLength(20);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.QtyShipment).HasColumnName("qtyShipment");

                entity.Property(e => e.QtyShipped).HasColumnName("qtyShipped");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(38)
                    .HasColumnName("shipmentId");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.HasOne(d => d.Shipment)
                    .WithMany(p => p.ShipmentLine)
                    .HasForeignKey(d => d.ShipmentId);

                entity.HasOne(d => d.Warehouse)
                    .WithMany(p => p.ShipmentLine)
                    .HasForeignKey(d => d.WarehouseId);
            });

            modelBuilder.Entity<TransferOrder>(entity =>
            {
                entity.ToTable("TransferOrder", "Magazzino");

                entity.HasIndex(e => e.WarehouseFromId, "IX_TransferOrder_warehouseFromId");

                entity.HasIndex(e => e.WarehouseToId, "IX_TransferOrder_warehouseToId");

                entity.Property(e => e.TransferOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderId");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .HasColumnName("description");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TransferOrderDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("transferOrderDate");

                entity.Property(e => e.TransferOrderNumber)
                    .HasMaxLength(20)
                    .HasColumnName("transferOrderNumber");

                entity.Property(e => e.WarehouseFromId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseFromId");

                entity.Property(e => e.WarehouseToId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseToId");

                entity.HasOne(d => d.WarehouseFrom)
                    .WithMany(p => p.TransferOrderWarehouseFrom)
                    .HasForeignKey(d => d.WarehouseFromId);

                entity.HasOne(d => d.WarehouseTo)
                    .WithMany(p => p.TransferOrderWarehouseTo)
                    .HasForeignKey(d => d.WarehouseToId);
            });

            modelBuilder.Entity<TransferOrderLine>(entity =>
            {
                entity.ToTable("TransferOrderLine", "Magazzino");

                entity.HasIndex(e => e.IdProdotto, "IX_TransferOrderLine_IdProdotto");

                entity.HasIndex(e => e.TransferOrderId, "IX_TransferOrderLine_transferOrderId");

                entity.Property(e => e.TransferOrderLineId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderLineId");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Qty).HasColumnName("qty");

                entity.Property(e => e.TransferOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderId");

                entity.HasOne(d => d.TransferOrder)
                    .WithMany(p => p.TransferOrderLine)
                    .HasForeignKey(d => d.TransferOrderId);
            });

            modelBuilder.Entity<Vmstock>(entity =>
            {
                entity.ToTable("VMStock", "Magazzino");

                entity.Property(e => e.VmstockId)
                    .HasMaxLength(38)
                    .HasColumnName("VMStockId");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");
            });

            modelBuilder.Entity<VwDatiRichiestaDelivery>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_DatiRichiestaDelivery", "Magazzino");

                entity.Property(e => e.Asset)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CodiceChiamata)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Contatto).HasMaxLength(200);

                entity.Property(e => e.DataAttivita).HasColumnType("datetime");

                entity.Property(e => e.DescrizioneProdotto)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.EmailContatto)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdEvento).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Matricola)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Matricola2)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Note).IsRequired();

                entity.Property(e => e.Telefono).HasMaxLength(200);
            });

            modelBuilder.Entity<VwFornitoriUbicazioni>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_FornitoriUbicazioni", "Magazzino");

                entity.Property(e => e.Cap)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodFornitore)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodiceEsterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Indirizzo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Localita)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RagioneSociale)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.RagioneSocialeFornitore)
                    .HasMaxLength(250)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwGiacenza>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Giacenza", "Magazzino");

                entity.Property(e => e.DescrizioneCostr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DescrizioneProd)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.GiacenzaId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.IdCliente).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.RagioneSocialeUbic)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RagionesocialeCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TipoProd)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseId).HasMaxLength(38);

                entity.Property(e => e.WarehouseName).HasMaxLength(50);
            });

            modelBuilder.Entity<VwProdottiCaricoScarico>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProdottiCaricoScarico", "Magazzino");

                entity.Property(e => e.CategoriaMerci)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodCostruttore)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Costruttore)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descrizione)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasMaxLength(38);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.LineId)
                    .IsRequired()
                    .HasMaxLength(38);

                entity.Property(e => e.Modello)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");
            });

            modelBuilder.Entity<VwProdottiOrdine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProdottiOrdine", "Magazzino");

                entity.Property(e => e.CategoriaMerci)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodCostruttore)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Costruttore)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descrizione)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Modello)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OrderId)
                    .HasMaxLength(38)
                    .HasColumnName("orderId");

                entity.Property(e => e.OrderLineId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .HasColumnName("orderLineId");

                entity.Property(e => e.Tipo)
                    .HasMaxLength(80)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwProdottiTrasferiti>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_ProdottiTrasferiti", "Magazzino");

                entity.Property(e => e.CategoriaMerci)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodCostruttore)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Costruttore)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Descrizione)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdProdotto).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Modello)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Tipo)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.TransferOrderId)
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderId");

                entity.Property(e => e.TransferOrderLineId)
                    .IsRequired()
                    .HasMaxLength(38)
                    .HasColumnName("transferOrderLineId");

                entity.Property(e => e.WarehouseFromId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseFromId");

                entity.Property(e => e.WarehouseToId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseToId");
            });

            modelBuilder.Entity<VwResponsabili>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Responsabili", "Magazzino");

                entity.Property(e => e.Cap)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Cellulare)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CodRisorsa)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.DescStat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.IdResponsabili)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Indirizzo)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Localita)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VwUbicazioni>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_Ubicazioni", "Magazzino");

                entity.Property(e => e.Cap)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdCliente).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Indirizzo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Localita)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RagioneSociale)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RagioneSocialeCliente)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.ToTable("Warehouse", "Magazzino");

                entity.HasIndex(e => e.IdUbicazione, "IX_Warehouse_IdUbicazione");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(38)
                    .HasColumnName("warehouseId");

                entity.Property(e => e.Cap).HasMaxLength(10);

                entity.Property(e => e.Citta).HasMaxLength(30);

                entity.Property(e => e.CodiceEsterno).HasMaxLength(10);

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .HasColumnName("description");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.IdUbicazione).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Indirizzo).HasMaxLength(50);

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Provincia).HasMaxLength(30);

                entity.Property(e => e.WarehouseName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("warehouseName");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}