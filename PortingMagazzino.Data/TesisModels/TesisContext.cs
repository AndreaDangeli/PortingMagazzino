// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace PortingMagazzino.TesisData.TesisModels
{
    public partial class TesisContext : DbContext
    {
        public TesisContext()
        {
        }

        public TesisContext(DbContextOptions<TesisContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Clienti> Clienti { get; set; }
        public virtual DbSet<Fornitori> Fornitori { get; set; }
        public virtual DbSet<TabCostruttore> TabCostruttore { get; set; }
        public virtual DbSet<TabTrasportatori> TabTrasportatori { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AI");

            modelBuilder.Entity<Clienti>(entity =>
            {
                entity.HasKey(e => e.IdCliente);

                entity.HasIndex(e => e.RagioneSociale, "IX_Clienti");

                entity.Property(e => e.IdCliente)
                    .HasColumnType("numeric(18, 0)")
                    .ValueGeneratedOnAdd()
                    .HasComment("PK");

                entity.Property(e => e.AttivaCampiObbligatoriHda).HasDefaultValueSql("((0))");

                entity.Property(e => e.BancaAbi)
                    .HasMaxLength(5)
                    .HasColumnName("BancaABI")
                    .HasComment("ABI");

                entity.Property(e => e.BancaAppoggio)
                    .HasMaxLength(50)
                    .HasComment("Nome banca appoggio");

                entity.Property(e => e.BancaCab)
                    .HasMaxLength(5)
                    .HasColumnName("BancaCAB")
                    .HasComment("CAB");

                entity.Property(e => e.BancaCc)
                    .HasMaxLength(12)
                    .HasColumnName("BancaCC")
                    .HasComment("Numero CC banca");

                entity.Property(e => e.BancaCin)
                    .HasMaxLength(1)
                    .HasColumnName("BancaCIN")
                    .HasComment("CIN");

                entity.Property(e => e.Cap)
                    .HasMaxLength(10)
                    .HasComment("Cap");

                entity.Property(e => e.CausaliDiFatturazione)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasComment("FK TabCausaliFattura (se specificato, solo queste causali sono utilizzabili su chiamate del cliente)");

                entity.Property(e => e.Ccmail)
                    .HasColumnName("CCMail")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CodAgente1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabAgenti");

                entity.Property(e => e.CodAgente2)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabAgenti");

                entity.Property(e => e.CodAgente3)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabAgenti");

                entity.Property(e => e.CodAgente4)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabAgenti");

                entity.Property(e => e.CodAreaGeografica)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Area geografica");

                entity.Property(e => e.CodAzienda)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Azienda assegnata");

                entity.Property(e => e.CodCdc)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Centro di competenza assegnato");

                entity.Property(e => e.CodCliente)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("Codice cliente generato progressivo");

                entity.Property(e => e.CodCondizionePagamento)
                    .HasMaxLength(6)
                    .HasComment("FK TabCondizioniPagamento");

                entity.Property(e => e.CodCreditoScaduto)
                    .HasMaxLength(6)
                    .HasComment("FK TabCreditoScaduto");

                entity.Property(e => e.CodGruppoClienti1)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Gruppo clienti1");

                entity.Property(e => e.CodGruppoClienti2)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Gruppo clienti2");

                entity.Property(e => e.CodGruppoClienti3)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Gruppo clienti3");

                entity.Property(e => e.CodNazione)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Nazione");

                entity.Property(e => e.CodRapportino)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabRapportini (modello di rapportino da usare per il cliente)");

                entity.Property(e => e.CodRegione)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Regione");

                entity.Property(e => e.CodTipoCliente)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Tipo cliente");

                entity.Property(e => e.CodTipoContratto)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("FK TabTipoContratto");

                entity.Property(e => e.CodTipoFatturazione)
                    .HasMaxLength(6)
                    .HasComment("FK TabTipoFatturazione");

                entity.Property(e => e.CodiceEsterno)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Codice di anagrafica esterna");

                entity.Property(e => e.CodiceFiscale)
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("Codice fiscale");

                entity.Property(e => e.CodiceIban)
                    .HasMaxLength(30)
                    .HasColumnName("CodiceIBAN")
                    .HasComment("IBAN");

                entity.Property(e => e.CodiceSms)
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.CodiceUnivoco)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Codmercato)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("codmercato")
                    .HasComment("Mercato assegnato (FK TabMercato)");

                entity.Property(e => e.ControlloChiamate)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Se cliente soggetto a verifica chiamata (Tabellone controllo Tempi)");

                entity.Property(e => e.DominioAgent)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Indirizzo email");

                entity.Property(e => e.EmailAmministrazione)
                    .HasMaxLength(500)
                    .HasComment("Indirizzo mail amministrazione (per invio allegati)");

                entity.Property(e => e.EmailIntCommerciale)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Contatto Email dell'interlocutore commerciale");

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Fax");

                entity.Property(e => e.FaxIntCommerciale)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Contatto Fax dell'interlocutore commerciale");

                entity.Property(e => e.FiltroAttivita)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroCatGuasto)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroConoscenza)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroEventiAssegnazione).IsUnicode(false);

                entity.Property(e => e.FiltroGruppoUbicazioni1)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroGruppoUbicazioni2)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroGruppoUbicazioni3)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroRisorseAssegnazione).IsUnicode(false);

                entity.Property(e => e.FiltroTipoGuasto)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FiltroTipoServizio)
                    .HasMaxLength(600)
                    .IsUnicode(false);

                entity.Property(e => e.FirstDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("Data inserimento");

                entity.Property(e => e.FirstUser).HasComment("IdUtente inserimento");

                entity.Property(e => e.IdAccount).HasComment("FK EmailAgent_Account");

                entity.Property(e => e.IdListino).HasComment("FK Listini. Listino applicato al cliente");

                entity.Property(e => e.ImportoCreditoScaduto)
                    .HasColumnType("money")
                    .HasComment("Eventuale importo insoluto");

                entity.Property(e => e.Indirizzo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Indirizzo");

                entity.Property(e => e.Insegna)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.IntCom)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Nome interlocutore commerciale");

                entity.Property(e => e.IntTec)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Nome interlocutore tecnico");

                entity.Property(e => e.InviaMailCliente).HasComment("Indica se suggerire invio mail a cliente in chiamata");

                entity.Property(e => e.InviaMailContatto).HasComment("Indica se suggerire invio mail al contatto in chiamata");

                entity.Property(e => e.InviaMailUbicazione).HasComment("Indica se suggerire invio mail al ubicazione in chiamata");

                entity.Property(e => e.LastDate)
                    .HasColumnType("smalldatetime")
                    .HasComment("Data ultima modifica");

                entity.Property(e => e.LastUp)
                    .HasMaxLength(8)
                    .IsFixedLength(true)
                    .HasComment("Timestamp ultima modifica");

                entity.Property(e => e.LastUser).HasComment("IdUtente ultima modifica");

                entity.Property(e => e.Localita)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Località");

                entity.Property(e => e.MailInterlocutore)
                    .HasMaxLength(50)
                    .HasComment("Nome interlocutore");

                entity.Property(e => e.MailRapportinoAttivita)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Per quali Tipi attività (codici FK TabAttivita) effettuare invio automatico rapportino");

                entity.Property(e => e.MailRapportinoAutomatico)
                    .HasDefaultValueSql("((0))")
                    .HasComment("Se inviare mail automatica con rapportino interenti");

                entity.Property(e => e.MailRapportinoDestinatario)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Indirizzi mail destinatari rapportino automatico");

                entity.Property(e => e.Note)
                    .HasColumnType("text")
                    .HasComment("Note");

                entity.Property(e => e.PartitaIva)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Partita IVA");

                entity.Property(e => e.Provincia)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasComment("Provincia");

                entity.Property(e => e.RagioneSociale)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Ragione sociale");

                entity.Property(e => e.Telefono)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Telefono");

                entity.Property(e => e.TelefonoIntCommerciale)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Contatto Telefono dell'interlocutore commerciale");

                entity.Property(e => e.TmnoMailRapportino).HasColumnName("TMNoMailRapportino");

                entity.Property(e => e.Valido).HasComment("Se valido");

                entity.Property(e => e.VisibileChiamate)
                    .HasDefaultValueSql("((1))")
                    .HasComment("Cliente visibile in gestione chiamate");

                entity.Property(e => e.Web)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Indirizzo web");
            });

            modelBuilder.Entity<Fornitori>(entity =>
            {
                entity.HasKey(e => e.IdFornitore);

                entity.Property(e => e.Cap)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CodFornitore)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.CodiceEsterno)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodiceFiscale)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Indirizzo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastUp)
                    .HasMaxLength(8)
                    .IsFixedLength(true);

                entity.Property(e => e.Localita)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.PartitaIva)
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.Provincia)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.RagioneSociale)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Telefono)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Valido).HasDefaultValueSql("((1))");

                entity.Property(e => e.Web)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TabCostruttore>(entity =>
            {
                entity.HasKey(e => e.CodCostruttore);

                entity.Property(e => e.CodCostruttore)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasComment("Codice costruttore prodotto");

                entity.Property(e => e.Descrizione)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Descrizione costruttore prodotto");

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Lastup)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<TabTrasportatori>(entity =>
            {
                entity.HasKey(e => e.IdTrasportatore);

                entity.Property(e => e.Descrizione).HasMaxLength(50);

                entity.Property(e => e.FirstDate).HasColumnType("smalldatetime");

                entity.Property(e => e.LastDate).HasColumnType("smalldatetime");

                entity.Property(e => e.Lastup)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}